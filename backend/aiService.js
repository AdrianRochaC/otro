const OpenAI = require('openai');
const { executeQuery } = require('./db-setup/connection-manager.js');
const ytdl = require('ytdl-core');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const { YoutubeTranscript } = require('youtube-transcript');
const videoProcessor = require('./videoProcessor.js');

dotenv.config();

// Configuraci√≥n de OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || OPENAI_API_KEY, // Cambiar por tu API key real
});

class AIService {
  constructor() {
    if (!process.env.OPENAI_API_KEY) {
      }
  }

  /**
   * Genera preguntas de evaluaci√≥n usando IA bas√°ndose en el contenido del curso
   * @param {Object} courseData - Datos del curso (t√≠tulo, descripci√≥n, contenido)
   * @param {number} numQuestions - N√∫mero de preguntas a generar (default: 5)
   * @returns {Array} Array de preguntas con opciones y respuesta correcta
   */
  async generateQuestions(courseData, numQuestions = 5) {
    try {
      console.log('ü§ñ === GENERANDO PREGUNTAS CON IA ===');
      console.log('üìä Datos del curso:');
      console.log('  - T√≠tulo:', courseData.title);
      console.log('  - Tipo de contenido:', courseData.contentType);
      console.log('  - Longitud del contenido:', courseData.content?.length || 0, 'caracteres');
      console.log('  - N√∫mero de preguntas solicitadas:', numQuestions);
      
      if (!process.env.OPENAI_API_KEY) {
        throw new Error('OPENAI_API_KEY no configurada');
      }

      const { title, description, content, contentType } = courseData;
      
      // Verificar que tenemos contenido suficiente (m√°s tolerante)
      if (!content || content.trim().length < 20) {
        console.warn('‚ö†Ô∏è Contenido muy limitado, generando preguntas b√°sicas...');
        // Generar preguntas b√°sicas basadas en t√≠tulo y descripci√≥n
        return this.generateBasicQuestions(title, description, numQuestions);
      }
      
      if (content.trim().length < 100) {
        console.warn('‚ö†Ô∏è Contenido limitado, pero intentando generar preguntas...');
      }
      
      // Crear prompt contextual para OpenAI
      const prompt = this.createPrompt(title, description, content, contentType, numQuestions);
      
      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "Eres un experto en crear evaluaciones educativas. Genera preguntas claras, relevantes y desafiantes basadas EXCLUSIVAMENTE en el contenido proporcionado. Las preguntas deben evaluar la comprensi√≥n real del material presentado."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 2000
      });

      const response = completion.choices[0].message.content;
      console.log('üìù Respuesta de OpenAI recibida:', response.length, 'caracteres');
      console.log('üìã Primeros 300 chars de la respuesta:', response.substring(0, 300));
      
      const questions = this.parseAIResponse(response);
      console.log('‚úÖ Preguntas generadas exitosamente:', questions.length);
      console.log('üìä Resumen de preguntas:');
      questions.forEach((q, i) => {
        console.log(`  ${i + 1}. ${q.question.substring(0, 50)}...`);
      });
      
      return questions;
      
    } catch (error) {
      console.error('‚ùå Error generando preguntas:', error.message);
      throw error;
    }
  }

  /**
   * Genera preguntas b√°sicas cuando no hay suficiente contenido
   */
  generateBasicQuestions(title, description, numQuestions) {
    console.log('üîß === GENERANDO PREGUNTAS B√ÅSICAS ===');
    console.log('üìù T√≠tulo:', title);
    console.log('üìÑ Descripci√≥n:', description?.substring(0, 200) || 'Sin descripci√≥n');
    console.log('üî¢ N√∫mero solicitado:', numQuestions);
    
    const questions = [];
    const basicQuestions = [
      {
        question: `¬øCu√°l es el tema principal del curso "${title}"?`,
        options: [
          "El tema principal se explica en la descripci√≥n del curso",
          "No se especifica un tema principal",
          "El tema principal es evidente en el t√≠tulo",
          "El tema principal se desarrolla a lo largo del curso"
        ],
        correctIndex: 0,
        explanation: "El tema principal del curso se puede identificar en la descripci√≥n proporcionada."
      },
      {
        question: `¬øQu√© tipo de contenido educativo se presenta en "${title}"?`,
        options: [
          "Contenido audiovisual educativo",
          "Contenido te√≥rico √∫nicamente",
          "Contenido pr√°ctico √∫nicamente",
          "Contenido mixto te√≥rico-pr√°ctico"
        ],
        correctIndex: 0,
        explanation: "El curso presenta contenido audiovisual educativo como se indica en el formato del material."
      },
      {
        question: `¬øQu√© se puede esperar aprender de "${title}"?`,
        options: [
          "Conocimientos relacionados con el tema del curso",
          "Informaci√≥n general sin aplicaci√≥n pr√°ctica",
          "Solo conceptos b√°sicos",
          "Informaci√≥n desactualizada"
        ],
        correctIndex: 0,
        explanation: "El curso est√° dise√±ado para transmitir conocimientos relacionados con el tema presentado."
      },
      {
        question: `¬øCu√°l es la mejor forma de aprovechar el contenido de "${title}"?`,
        options: [
          "Prestar atenci√≥n completa al material presentado",
          "Revisar solo las partes m√°s importantes",
          "Saltar las explicaciones detalladas",
          "Ver el contenido de forma superficial"
        ],
        correctIndex: 0,
        explanation: "Para aprovechar al m√°ximo el contenido educativo, es importante prestar atenci√≥n completa al material."
      },
      {
        question: `¬øQu√© nivel de conocimiento se requiere para entender "${title}"?`,
        options: [
          "El nivel apropiado se indica en la descripci√≥n del curso",
          "Se requiere conocimiento avanzado",
          "Solo se necesita conocimiento b√°sico",
          "No se especifica el nivel requerido"
        ],
        correctIndex: 0,
        explanation: "El nivel de conocimiento requerido se puede determinar revisando la descripci√≥n del curso."
      }
    ];

    // Agregar preguntas b√°sicas hasta alcanzar el n√∫mero solicitado
    for (let i = 0; i < Math.min(numQuestions, basicQuestions.length); i++) {
      questions.push(basicQuestions[i]);
    }

    console.log('‚úÖ Preguntas b√°sicas generadas:', questions.length);
    console.log('üìä Resumen de preguntas b√°sicas:');
    questions.forEach((q, i) => {
      console.log(`  ${i + 1}. ${q.question.substring(0, 50)}...`);
    });

    return questions;
  }

  /**
   * Crea el prompt para OpenAI bas√°ndose en el tipo de contenido
   */
  createPrompt(title, description, content, contentType, numQuestions) {
    let contentContext = '';
    let specificInstructions = '';
    
    if (contentType === 'youtube') {
      contentContext = `CONTENIDO DEL VIDEO DE YOUTUBE:
${content}`;
      specificInstructions = `
INSTRUCCIONES ESPEC√çFICAS PARA VIDEO DE YOUTUBE:
- Analiza el t√≠tulo, descripci√≥n y metadatos del video
- Genera preguntas que eval√∫en la comprensi√≥n de los conceptos principales
- Considera la duraci√≥n y categor√≠a del video para ajustar el nivel de dificultad
- Las preguntas deben ser relevantes para el contenido educativo del video`;
    } else if (contentType === 'video') {
      contentContext = `CONTENIDO REAL DEL ARCHIVO DE VIDEO (TRANSCRIPCI√ìN COMPLETA):
${content}`;
      specificInstructions = `
INSTRUCCIONES ESPEC√çFICAS PARA ARCHIVO DE VIDEO CON TRANSCRIPCI√ìN:
- Analiza la transcripci√≥n real del audio del video para identificar los temas espec√≠ficos tratados
- Genera preguntas que eval√∫en la comprensi√≥n de los conceptos MENCIONADOS REALMENTE en el video
- Usa los puntos clave, entidades y sentimientos identificados en la transcripci√≥n
- Las preguntas deben ser espec√≠ficas al contenido real del video, no gen√©ricas
- Considera la confianza de la transcripci√≥n para ajustar el nivel de detalle de las preguntas
- Incluye preguntas sobre conceptos espec√≠ficos, ejemplos mencionados, y conclusiones presentadas`;
    } else if (contentType === 'file') {
      contentContext = `CONTENIDO DEL DOCUMENTO:
${content}`;
      specificInstructions = `
INSTRUCCIONES ESPEC√çFICAS PARA DOCUMENTO:
- Analiza el tipo de documento (PDF, Word, etc.) y su nombre
- Genera preguntas que eval√∫en la comprensi√≥n de los temas del documento
- Considera el formato del archivo para determinar el tipo de contenido educativo`;
    } else {
      contentContext = `CONTENIDO DEL CURSO:
${content}`;
      specificInstructions = `
INSTRUCCIONES GENERALES:
- Genera preguntas bas√°ndote en el t√≠tulo y descripci√≥n del curso
- Las preguntas deben cubrir los conceptos principales del tema
- Mant√©n un nivel de dificultad apropiado para el contenido`;
    }

    return `
Eres un experto en crear evaluaciones educativas. Genera ${numQuestions} preguntas de evaluaci√≥n para el siguiente curso:

T√çTULO DEL CURSO: ${title}
DESCRIPCI√ìN DEL CURSO: ${description}

${contentContext}

${specificInstructions}

REQUISITOS GENERALES:
- Cada pregunta debe ser clara, espec√≠fica y relevante
- Las opciones deben ser plausibles pero solo una correcta
- El nivel de dificultad debe ser apropiado para el contenido
- Las preguntas deben cubrir diferentes aspectos del tema
- Usa un lenguaje claro y profesional
- Evita preguntas demasiado obvias o demasiado complejas

FORMATO DE RESPUESTA (JSON):
[
  {
    "question": "Pregunta aqu√≠",
    "options": ["Opci√≥n A", "Opci√≥n B", "Opci√≥n C", "Opci√≥n D"],
    "correctIndex": 0,
    "explanation": "Explicaci√≥n breve de por qu√© es correcta"
  }
]

IMPORTANTE: Solo responde con el JSON v√°lido, sin texto adicional. Aseg√∫rate de que el JSON sea v√°lido y que correctIndex sea un n√∫mero entre 0 y 3.
`;
  }

  /**
   * Parsea la respuesta de OpenAI a un formato utilizable
   */
  parseAIResponse(response) {
    try {
      // Limpiar la respuesta y extraer solo el JSON
      const jsonMatch = response.match(/\[[\s\S]*\]/);
      if (!jsonMatch) {
        throw new Error('No se encontr√≥ JSON v√°lido en la respuesta');
      }

      const questions = JSON.parse(jsonMatch[0]);
      
      // Validar y limpiar las preguntas
      return questions.map(q => ({
        question: q.question?.trim() || '',
        options: (q.options || []).map(opt => opt?.trim() || ''),
        correctIndex: parseInt(q.correctIndex) || 0,
        explanation: q.explanation?.trim() || ''
      })).filter(q => 
        q.question && 
        q.options.length === 4 && 
        q.options.every(opt => opt) &&
        q.correctIndex >= 0 && 
        q.correctIndex <= 3
      );
      
    } catch (error) {
      throw new Error('Respuesta de IA malformada');
    }
  }

  /**
   * Obtiene informaci√≥n del video de YouTube con transcripci√≥n real
   */
  async getYouTubeVideoInfo(videoUrl) {
    try {
      console.log('üé¨ === OBTENIENDO INFORMACI√ìN DE YOUTUBE ===');
      console.log('üì∫ URL:', videoUrl);
      
      // Obtener informaci√≥n b√°sica del video
      const info = await ytdl.getInfo(videoUrl);
      console.log('üìã Informaci√≥n b√°sica obtenida:');
      console.log('  - T√≠tulo:', info.videoDetails.title);
      console.log('  - Duraci√≥n:', info.videoDetails.lengthSeconds, 'segundos');
      console.log('  - Categor√≠a:', info.videoDetails.category);
      console.log('  - Visualizaciones:', info.videoDetails.viewCount);
      console.log('  - Descripci√≥n (primeros 200 chars):', (info.videoDetails.description || '').substring(0, 200));
      
      // Intentar obtener transcripci√≥n directa
      let transcriptText = '';
      let confidence = 0.7;
      
      try {
        // Extraer ID del video
        const videoId = this.extractVideoId(videoUrl);
        console.log('üÜî Video ID extra√≠do:', videoId);
        
        if (videoId) {
          console.log('üé§ Intentando obtener transcripci√≥n...');
          const transcript = await YoutubeTranscript.fetchTranscript(videoId, {
            lang: 'es',
            country: 'ES'
          });
          
          if (transcript && transcript.length > 0) {
            transcriptText = transcript.map(item => item.text).join(' ');
            confidence = 0.9; // Alta confianza para transcripciones oficiales
            console.log('‚úÖ Transcripci√≥n obtenida:', transcriptText.length, 'caracteres');
            console.log('üìù Primeros 300 chars de transcripci√≥n:', transcriptText.substring(0, 300));
          } else {
            console.log('‚ö†Ô∏è Transcripci√≥n vac√≠a o no disponible');
          }
        }
      } catch (transcriptError) {
        console.log('‚ùå Error obteniendo transcripci√≥n:', transcriptError.message);
        // Si no hay transcripci√≥n, usar solo descripci√≥n
        transcriptText = info.videoDetails.description || '';
        confidence = 0.5;
        console.log('üîÑ Usando descripci√≥n como fallback:', transcriptText.length, 'caracteres');
      }
      
      // Crear contenido enriquecido
      const enrichedContent = `
T√çTULO DEL VIDEO: ${info.videoDetails.title}
DURACI√ìN: ${Math.floor(info.videoDetails.lengthSeconds / 60)} minutos ${info.videoDetails.lengthSeconds % 60} segundos
CATEGOR√çA: ${info.videoDetails.category || 'Educaci√≥n'}
VISUALIZACIONES: ${info.videoDetails.viewCount || '0'}

DESCRIPCI√ìN DEL VIDEO:
${info.videoDetails.description || 'No hay descripci√≥n disponible'}

TRANSCRIPCI√ìN DEL CONTENIDO:
${transcriptText || 'No se pudo obtener transcripci√≥n del video'}

INSTRUCCIONES PARA LA IA:
Bas√°ndote en la transcripci√≥n real del video de YouTube (si est√° disponible) o en el t√≠tulo y descripci√≥n, genera preguntas de evaluaci√≥n que eval√∫en la comprensi√≥n del contenido espec√≠fico mencionado en el video. Las preguntas deben ser relevantes para el material educativo real que se presenta.
      `;
      
      console.log('üìä === RESUMEN DE INFORMACI√ìN OBTENIDA ===');
      console.log('üìè Longitud total del contenido:', enrichedContent.length, 'caracteres');
      console.log('üìù Longitud de transcripci√≥n:', transcriptText.length, 'caracteres');
      console.log('üìÑ Longitud de descripci√≥n:', (info.videoDetails.description || '').length, 'caracteres');
      console.log('üéØ Confianza:', confidence);
      console.log('üìã Contenido final (primeros 500 chars):', enrichedContent.substring(0, 500));
      
      return {
        title: info.videoDetails.title,
        content: enrichedContent,
        contentType: 'youtube',
        duration: parseInt(info.videoDetails.lengthSeconds),
        transcription: transcriptText,
        confidence: confidence,
        metadata: {
          category: info.videoDetails.category,
          viewCount: info.videoDetails.viewCount,
          description: info.videoDetails.description,
          highlights: [],
          entities: [],
          sentiment: []
        }
      };
      
    } catch (error) {
      console.error('‚ùå Error en getYouTubeVideoInfo:', error.message);
      throw error;
    }
  }

  /**
   * Extrae el ID del video de una URL de YouTube
   */
  extractVideoId(url) {
    const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
    const match = url.match(regex);
    return match ? match[1] : null;
  }

  /**
   * Extrae transcripci√≥n real de video de YouTube
   */
  async extractYouTubeTranscript(videoUrl) {
    try {
      // Usar el procesador de video para obtener transcripci√≥n real
      const videoData = await videoProcessor.processYouTubeVideo(videoUrl);
      
      // Crear contenido enriquecido con la transcripci√≥n real
      const enrichedContent = `
T√çTULO DEL VIDEO: ${videoData.title}
DURACI√ìN: ${Math.floor(videoData.duration / 60)} minutos ${videoData.duration % 60} segundos
CATEGOR√çA: ${videoData.category}
VISUALIZACIONES: ${videoData.viewCount}

DESCRIPCI√ìN DEL VIDEO:
${videoData.description}

TRANSCRIPCI√ìN COMPLETA DEL AUDIO:
${videoData.transcription}

PUNTOS CLAVE IDENTIFICADOS:
${videoData.highlights ? videoData.highlights.map(h => `- ${h.text}`).join('\n') : 'No se identificaron puntos clave espec√≠ficos'}

ENTIDADES IMPORTANTES MENCIONADAS:
${videoData.entities ? videoData.entities.map(e => `- ${e.text} (${e.entity_type})`).join('\n') : 'No se identificaron entidades espec√≠ficas'}

INSTRUCCIONES PARA LA IA:
Bas√°ndote en la transcripci√≥n real del video de YouTube, genera preguntas de evaluaci√≥n que eval√∫en la comprensi√≥n del contenido espec√≠fico mencionado en el audio. Las preguntas deben ser relevantes para el material educativo real que se presenta en el video.
      `;
      
      
      return {
        title: videoData.title,
        content: enrichedContent,
        contentType: 'youtube',
        duration: videoData.duration,
        transcription: videoData.transcription,
        confidence: videoData.confidence,
        metadata: {
          category: videoData.category,
          viewCount: videoData.viewCount,
          description: videoData.description,
          highlights: videoData.highlights,
          entities: videoData.entities,
          sentiment: videoData.sentiment
        }
      };
      
    } catch (error) {
      throw error;
    }
  }

  /**
   * Procesa archivo MP4 con transcripci√≥n real
   */
  async processMP4WithTranscription(filePath) {
    try {
      // Usar el procesador de video para obtener transcripci√≥n real
      const videoData = await videoProcessor.processMP4Video(filePath);
      
      // Crear contenido enriquecido con la transcripci√≥n real
      const enrichedContent = `
NOMBRE DEL ARCHIVO: ${videoData.fileName}
TAMA√ëO: ${(videoData.fileSize / (1024 * 1024)).toFixed(2)} MB
FECHA DE MODIFICACI√ìN: ${videoData.modifiedDate.toLocaleDateString()}

TRANSCRIPCI√ìN COMPLETA DEL AUDIO:
${videoData.transcription}

PUNTOS CLAVE IDENTIFICADOS:
${videoData.highlights ? videoData.highlights.map(h => `- ${h.text}`).join('\n') : 'No se identificaron puntos clave espec√≠ficos'}

ENTIDADES IMPORTANTES MENCIONADAS:
${videoData.entities ? videoData.entities.map(e => `- ${e.text} (${e.entity_type})`).join('\n') : 'No se identificaron entidades espec√≠ficas'}

INSTRUCCIONES PARA LA IA:
Bas√°ndote en la transcripci√≥n real del archivo de video, genera preguntas de evaluaci√≥n que eval√∫en la comprensi√≥n del contenido espec√≠fico mencionado en el audio. Las preguntas deben ser relevantes para el material educativo real que se presenta en el video.
      `;
      
      return {
        title: videoData.fileName,
        content: enrichedContent,
        contentType: 'video',
        transcription: videoData.transcription,
        confidence: videoData.confidence,
        metadata: {
          fileSize: videoData.fileSize,
          modifiedDate: videoData.modifiedDate,
          highlights: videoData.highlights,
          entities: videoData.entities,
          sentiment: videoData.sentiment
        }
      };
      
    } catch (error) {
      throw error;
    }
  }

  /**
   * Analiza contenido de archivo (PDF, DOC, videos, etc.)
   */
  async analyzeFileContent(filePath) {
    try {
      const fileName = path.basename(filePath);
      const fileExtension = path.extname(filePath).toLowerCase();
      
      let content = `Archivo: ${fileName}`;
      let contentType = 'file';
      
      // An√°lisis espec√≠fico para diferentes tipos de archivo
      if (fileExtension === '.pdf') {
        content += '\nTipo: Documento PDF';
        content += '\n\nINSTRUCCIONES PARA LA IA: Bas√°ndote en el nombre del archivo PDF, genera preguntas de evaluaci√≥n que cubran los temas principales que se podr√≠an tratar en un documento de este tipo.';
      } else if (fileExtension === '.doc' || fileExtension === '.docx') {
        content += '\nTipo: Documento Word';
        content += '\n\nINSTRUCCIONES PARA LA IA: Bas√°ndote en el nombre del archivo Word, genera preguntas de evaluaci√≥n que cubran los temas principales que se podr√≠an tratar en un documento de este tipo.';
      } else if (['.mp4', '.avi', '.mov', '.wmv', '.mkv'].includes(fileExtension)) {
        content += '\nTipo: Archivo de video';
        contentType = 'video';
        
        // Obtener informaci√≥n b√°sica del archivo
        try {
          const stats = fs.statSync(filePath);
          const fileSizeMB = (stats.size / (1024 * 1024)).toFixed(2);
          const modifiedDate = stats.mtime.toLocaleDateString();
          
          content += `\nTama√±o: ${fileSizeMB} MB`;
          content += `\nFecha de modificaci√≥n: ${modifiedDate}`;
          content += `\nExtensi√≥n: ${fileExtension.toUpperCase()}`;
        } catch (statsError) {
          }
        
        content += '\n\nINSTRUCCIONES PARA LA IA: Bas√°ndote en el nombre del archivo de video y sus metadatos, genera preguntas de evaluaci√≥n que cubran los temas principales que se podr√≠an tratar en un video educativo de este tipo. Considera que es contenido audiovisual educativo.';
      } else {
        content += '\nTipo: Archivo desconocido';
        content += '\n\nINSTRUCCIONES PARA LA IA: Bas√°ndote en el nombre del archivo, genera preguntas de evaluaci√≥n generales que podr√≠an ser relevantes para el contenido educativo.';
      }
      
      return {
        title: fileName,
        content: content,
        contentType: contentType,
        fileExtension: fileExtension
      };
      
    } catch (error) {
      throw error;
    }
  }

  /**
   * Genera preguntas autom√°ticamente para un curso existente
   */
  async generateQuestionsForCourse(courseId) {
    try {
      // Obtener datos del curso
      const [courses] = await executeQuery(
        'SELECT * FROM courses WHERE id = ?',
        [courseId]
      );

      if (courses.length === 0) {
        throw new Error('Curso no encontrado');
      }

      const course = courses[0];
      let courseData;

      // Determinar el tipo de contenido y extraer informaci√≥n
      if (course.video_url && course.video_url.includes('youtube.com')) {
        courseData = await this.extractYouTubeTranscript(course.video_url);
      } else if (course.video_url) {
        courseData = await this.analyzeFileContent(course.video_url);
      } else {
        // Solo usar t√≠tulo y descripci√≥n
        courseData = {
          title: course.title,
          content: course.description,
          contentType: 'text'
        };
      }

      // Generar preguntas con IA
      const questions = await this.generateQuestions(courseData);
      
      // Guardar las preguntas en la base de datos
      await this.saveQuestionsToDatabase(courseId, questions);
      
      return questions;
      
    } catch (error) {
      throw error;
    }
  }

  /**
   * Guarda las preguntas generadas en la base de datos
   */
  async saveQuestionsToDatabase(courseId, questions) {
    try {
      // Eliminar preguntas existentes
      await executeQuery('DELETE FROM questions WHERE course_id = ?', [courseId]);
      
      // Insertar nuevas preguntas
      for (const question of questions) {
        await executeQuery(
          `INSERT INTO questions (course_id, question, option_1, option_2, option_3, option_4, correct_index) 
           VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            courseId,
            question.question,
            question.options[0],
            question.options[1],
            question.options[2],
            question.options[3],
            question.correctIndex
          ]
        );
      }
      
      } catch (error) {
      throw error;
    }
  }
}

module.exports = new AIService();
